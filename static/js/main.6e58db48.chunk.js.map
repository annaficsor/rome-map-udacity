{"version":3,"sources":["icons/markers/attraction.svg","icons/markers/coffee.svg","icons/markers/food.svg","icons/markers/park.svg","icons/arrow-back.svg","icons/markers/attraction-onecolor.svg","icons/markers/coffe-onecolor.svg","icons/markers/food-onecolor.svg","icons/markers/parks-onecolor.svg","icons/filter-arrow.svg","icons/address.svg","icons/closed.svg","icons/open.svg","icons/rating.svg","DropdownSelection.js","AllLocations.js","SelectedPlace.js","SelectedPlaceWiki.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DropdownSelection","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","type","name","state","selectedType","onChange","bind","assertThisInitialized","setState","onUpdateType","_this2","react_default","a","createElement","downshift_esm","selectedItem","itemToString","_ref","isOpen","getToggleButtonProps","getItemProps","highlightedIndex","getLabelProps","assign","className","src","arrow","alt","style","position","map","item","index","concat","key","fontWeight","Component","AllLocations","listNames","marker","onMap","event","location","src_DropdownSelection","length","role","title","id","markers","filter","onClick","e","handleClick","onKeyPress","keyEvent","tabIndex","SelectedPlace","onUpdatePlace","pricePercentage","price","divStyle","width","Math","round","href","lat","long","address","rating","openingHours","open","closed","url","image","SelectedPlaceWiki","wikiName","wikiLat","wikiLong","wiki","wikiUrl","wikiImage","App","infoWindow","place","hasError","googleError","isScriptLoadSucceed","window","google","maps","Map","document","getElementById","center","lng","zoom","styles","mapStyle","bounds","LatLngBounds","InfoWindow","locations","icon","latlng","attraction","coffee","food","park","Marker","push","addListener","makeInfoWindow","setMarkerIcon","extend","fitBounds","alert","gm_authFailure","selectedIcon","setIcon","loc","attraction1c","coffee1c","food1c","park1c","infowindow","setZoom","setCenter","getPosition","setContent","StreetViewService","getPanoramaByLocation","data","status","StreetViewStatus","OK","nearStreetViewLocation","latLng","panoramaOptions","disableDefaultUI","pov","heading","pitch","StreetViewPanorama","yelp","_this3","params","latitude","longitude","term","radius","limit","headers","Authorization","config","yelp_api","Accept","Content-Type","Origin","Access-Control-Allow-Headers","Access-Control-Allow-Origin","fetch","URLSearchParams","then","resp","json","response","businesses","hasOwnProperty","hours","is_open_now","photos","address1","coordinates","catch","console","log","$","ajax","X-Requested-With","crossDomain","dataType","done","replace","wikiText","fail","page","query","pages","pageId","keys","text","extract","fullurl","original","source","_this4","src_AllLocations","updateType","src_SelectedPlace","updatePlace","src_SelectedPlaceWiki","scriptLoader","googleApi","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","BrowserRouter","src_App_0","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6e58db48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/attraction.535fa7e3.svg\";","module.exports = __webpack_public_path__ + \"static/media/coffee.234dd57f.svg\";","module.exports = __webpack_public_path__ + \"static/media/food.968d112b.svg\";","module.exports = __webpack_public_path__ + \"static/media/park.2e945e18.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-back.272bf941.svg\";","module.exports = __webpack_public_path__ + \"static/media/attraction-onecolor.419a3715.svg\";","module.exports = __webpack_public_path__ + \"static/media/coffe-onecolor.85a2760e.svg\";","module.exports = __webpack_public_path__ + \"static/media/food-onecolor.7431f7cb.svg\";","module.exports = __webpack_public_path__ + \"static/media/parks-onecolor.71f89e4f.svg\";","module.exports = __webpack_public_path__ + \"static/media/filter-arrow.abfbafa1.svg\";","module.exports = __webpack_public_path__ + \"static/media/address.d6aea5fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/closed.97a25e65.svg\";","module.exports = __webpack_public_path__ + \"static/media/open.c57da446.svg\";","module.exports = __webpack_public_path__ + \"static/media/rating.0ddd2ff2.svg\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport arrow from './icons/filter-arrow.svg'\r\nimport Downshift from 'downshift';\r\n\r\nclass DropdownSelection extends Component {\r\n  static propTypes = { onUpdateType: PropTypes.func.isRequired };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.type = [\r\n      { name: \"Attractions\" },\r\n      { name: \"Coffee\" },\r\n      { name: \"Restaurants\" },\r\n      { name: \"Parks\" },\r\n      { name: \"All\" }\r\n    ];\r\n\r\n    this.state = {\r\n      selectedType: \"\"\r\n    };\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  /* ** When the user selects a type at the Dropdown\r\n  menu this function will change the button's text to\r\n  the selected type's text, and calls the onUpdateType\r\n  function, which will change the state of the type, so\r\n  that the component will show only the places that match\r\n  to this selection. ** */\r\n\r\n  onChange(selectedType) {\r\n    this.setState({ selectedType: selectedType.name });\r\n    this.props.onUpdateType(selectedType.name)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Downshift\r\n        onChange={this.onChange}\r\n        selectedItem={this.state.selectedType}\r\n        itemToString={type => (type ? type.name : \"\")}\r\n      >\r\n        {({\r\n          isOpen,\r\n          getToggleButtonProps,\r\n          getItemProps,\r\n          highlightedIndex,\r\n          selectedItem: dsSelectedItem,\r\n          getLabelProps\r\n        }) => (\r\n          <div>\r\n            <button className=\"dropdown-button\" {...getToggleButtonProps()}>\r\n              {this.state.selectedType !== \"\"\r\n                ? this.state.selectedType\r\n                : 'Filter by type'}\r\n               <img src={arrow} alt=\"arrow down\" className='arrow-down'/>\r\n            </button>\r\n            <div style={{ position: \"relative\" }}>\r\n              {isOpen ? (\r\n                <div className=\"downshift-dropdown\">\r\n                  {this.type.map((item, index) => (\r\n                    <div\r\n                      className={`dropdown-item ${item.name}`}\r\n                      {...getItemProps({ key: index, index, item })}\r\n                      style={{\r\n                        fontWeight: highlightedIndex === index ? \"bold\" : \"normal\"\r\n                      }}\r\n                    >\r\n                      {item.name}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Downshift>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DropdownSelection;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport DropdownSelection from './DropdownSelection'\r\n\r\n\r\nclass AllLocations extends Component {\r\n  static propTypes = {\r\n    locations: PropTypes.array.isRequired,\r\n    onUpdateType: PropTypes.func.isRequired,\r\n    onMap: PropTypes.func.isRequired,\r\n    selectedType: PropTypes.string.isRequired,\r\n    markers: PropTypes.array.isRequired,\r\n  }\r\n\r\n  state = {\r\n    listNames: ['Attractions', 'Coffee', 'Restaurants', 'Parks'],\r\n  }\r\n\r\n  handleClick(marker) {\r\n    this.props.onMap(marker)\r\n  }\r\n\r\n  keyEvent(event, location) {\r\n    if (event.key === 'Enter') {\r\n    this.props.onMap(location)\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <section className=\"main-page\">\r\n        <h1>ROME</h1>\r\n        <DropdownSelection\r\n          onUpdateType = {this.props.onUpdateType}\r\n        />\r\n\r\n        {(this.props.selectedType.length < 1 || this.props.selectedType === 'All') && (\r\n          <div className=\"list\" role=\"group\">\r\n            {this.state.listNames.map((title, index) => (\r\n              <div key={title[index]} className='listChild'>\r\n                <h2 id={`${title}`}>{title}</h2>\r\n                <div className=\"list-items\">\r\n                  <ul className=\"list-grid\" role=\"list\">\r\n                    {this.props.markers\r\n                      .filter(type => type.id === title)\r\n                      .map(location => (\r\n                      <li className={`loc${location.id}`} key={location.title} onClick={(e) => this.handleClick(location)} onKeyPress={(e) => this.keyEvent(e, location)} tabIndex=\"0\" role=\"link listitemn\">{location.title}</li>))\r\n                    }\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        {this.props.selectedType.length > 1 && (\r\n          <div className=\"list\" role=\"group\">\r\n            {this.state.listNames\r\n              .filter(type => type === this.props.selectedType)\r\n              .map((title, index) => (\r\n              <div key={title[index]} className='listChild'>\r\n                <h2 id={`${title}`}>{title}</h2>\r\n                <div className=\"list-items\">\r\n                  <ul className=\"list-grid\" role=\"list\">\r\n                    {this.props.markers\r\n                      .filter(type => type.id === title)\r\n                      .map(location => (\r\n                      <li className={`loc${location.id}`} key={location.title} onClick={(e) => this.handleClick(location)}\r\n                      onKeyPress={(e) => this.keyEvent(e, location)}\r\n                      tabIndex=\"0\" role=\"link listitemn\">{location.title}</li>))\r\n                    }\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AllLocations;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport arrow from './icons/arrow-back.svg'\r\nimport address from './icons/address.svg'\r\nimport closed from './icons/closed.svg'\r\nimport open from './icons/open.svg'\r\nimport rating from './icons/rating.svg'\r\n\r\nclass SelectedPlace extends Component {\r\n  static propTypes = {\r\n    onUpdatePlace: PropTypes.func.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    image: PropTypes.array.isRequired,\r\n    openingHours: PropTypes.bool.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    price: PropTypes.string.isRequired,\r\n    rating: PropTypes.number.isRequired,\r\n    address: PropTypes.string.isRequired,\r\n    lat: PropTypes.number.isRequired,\r\n    long: PropTypes.number.isRequired\r\n  }\r\n\r\n  /* ** When the user clicks on the back div\r\n  this function will call the onUpdatePlace,\r\n  which will set the state of the place to false,\r\n  so that the user will see the main page ** */\r\n\r\n  handleClick() {\r\n    this.props.onUpdatePlace()\r\n  }\r\n\r\n  /* ** This keyEvent function helps users who\r\n  use tab for navigation ** */\r\n\r\n  keyEvent = (event) => {\r\n    if (event.key === 'Enter') {\r\n    this.props.onUpdatePlace()\r\n    }\r\n  }\r\n\r\n  /* ** Until the state doesn't receive\r\n  the fetched data the page return loader\r\n  animation. When the data arrive the\r\n  page will return the content.\r\n  The pricePercentageRounded divStyle\r\n  helps to visualize the price more clearly ** */\r\n\r\n  render() {\r\n\r\n    const priceTotal = 4;\r\n    const pricePercentage = (this.props.price.length / priceTotal) * 100;\r\n    const pricePercentageRounded = `${(Math.round(pricePercentage / 10) * 10)}%`;\r\n    const divStyle = {width: pricePercentageRounded};\r\n\r\n    return (\r\n      <div className=\"place\">\r\n        {this.props.name.length < 1 && (\r\n          <div className=\"holder\" role=\"progressbar\">\r\n            <div className=\"preloader\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n          </div>\r\n        )}\r\n\r\n        {this.props.name.length > 1 && (\r\n          <article className=\"place\">\r\n            <div className=\"back\" onClick={() => this.handleClick()} onKeyPress={(e) => this.keyEvent(e)} tabIndex='0' role=\"navigation\">\r\n            <img src={arrow} alt=\"Go back arrow\"/><span className=\"backtext\">BACK</span>\r\n            </div>\r\n\r\n            <h1>{this.props.name}</h1>\r\n            <h3 className=\"linkDirections\">\r\n              <a href={`https://www.google.com/maps/dir/?api=1&destination=${this.props.lat},${this.props.long}&travelmode=walking`}>Get directions >></a>\r\n            </h3>\r\n\r\n            <div className=\"info\">\r\n            <img src={address} alt=\"Address\"/><span className=\"address\">{this.props.address}</span>\r\n            </div>\r\n\r\n            <div className=\"info\">\r\n            <img src={rating} alt=\"Rating\"/><span className=\"rating\">{this.props.rating}<span className=\"rating2\">/5</span></span>\r\n            </div>\r\n\r\n            <div className=\"info\">\r\n              <span>Price: </span>\r\n              <div className=\"price-outer\">\r\n                <div className=\"price-inner\" style={divStyle}></div>\r\n              </div>\r\n            </div>\r\n\r\n            {this.props.openingHours === true && (\r\n              <div className=\"info\">\r\n                <img src={open} alt=\"open\"/><span className=\"open\">Now open!</span>\r\n              </div>\r\n            )}\r\n\r\n            {this.props.openingHours === false && (\r\n              <div className=\"info\">\r\n                <img src={closed} alt=\"closed\"/><span className=\"closed\">Currently closed :(</span>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"link\">\r\n              <a href={this.props.url}>More information >></a>\r\n            </div>\r\n\r\n            {this.props.image.map((image, index) => (\r\n              <img key={index} className=\"placeimage\" src={image} alt={this.props.name}/>\r\n            ))}\r\n\r\n          </article>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SelectedPlace;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport arrow from './icons/arrow-back.svg'\r\n\r\nclass SelectedPlaceWiki extends Component {\r\n  static propTypes = {\r\n    onUpdatePlace: PropTypes.func.isRequired,\r\n    wikiName: PropTypes.string.isRequired,\r\n    wiki: PropTypes.string.isRequired,\r\n    wikiImage: PropTypes.string.isRequired,\r\n    wikiUrl: PropTypes.string.isRequired,\r\n    wikiLat: PropTypes.number.isRequired,\r\n    wikiLong: PropTypes.number.isRequired\r\n  }\r\n\r\n  /* ** When the user clicks on the back div\r\n  this function will call the onUpdatePlace,\r\n  which will set the state of the place to false,\r\n  so that the user will see the main page ** */\r\n\r\n  handleClick() {\r\n    this.props.onUpdatePlace()\r\n  }\r\n\r\n  /* ** This keyEvent function helps users who\r\n  use tab for navigation ** */\r\n\r\n  keyEvent = (event) => {\r\n    if (event.key === 'Enter') {\r\n    this.props.onUpdatePlace()\r\n    }\r\n  }\r\n\r\n  /* ** Until the state doesn't receive\r\n  the fetched data the page return loader\r\n  animation. When the data arrive the\r\n  page will return the content.  ** */\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"place\">\r\n        {this.props.wikiName.length < 1 && (\r\n          <div className=\"holder\" role=\"progressbar\">\r\n            <div className=\"preloader\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n          </div>\r\n        )}\r\n\r\n        {this.props.wikiName.length > 1 && (\r\n          <article className=\"place\">\r\n            <div className=\"back\" onClick={() => this.handleClick()} onKeyPress={(e) => this.keyEvent(e)} tabIndex='0' role=\"navigation\">\r\n              <img src={arrow} alt=\"Go back arrow\"/><span className=\"backtext\">BACK</span>\r\n            </div>\r\n            <h1>{this.props.wikiName}</h1>\r\n            <h3 className=\"linkDirections\">\r\n              <a href={`https://www.google.com/maps/dir/?api=1&destination=${this.props.wikiLat},${this.props.wikiLong}&travelmode=walking`}>Get directions >></a>\r\n            </h3>\r\n            <div className=\"wikitext\">{this.props.wiki}</div>\r\n            <div className=\"link\">\r\n              <a href={this.props.wikiUrl}>More information >></a>\r\n            </div>\r\n            <img className=\"placeimage\" src={this.props.wikiImage} alt={this.props.wikiName}/>\r\n          </article>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SelectedPlaceWiki;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport locations from './locations.json'\nimport mapStyle from './map-style.json'\nimport AllLocations from './AllLocations'\nimport SelectedPlace from './SelectedPlace'\nimport SelectedPlaceWiki from './SelectedPlaceWiki'\nimport scriptLoader from 'react-async-script-loader'\nimport config from './config_helper.json'\nimport $ from \"jquery\";\nimport attraction from './icons/markers/attraction.svg'\nimport coffee from './icons/markers/coffee.svg'\nimport food from './icons/markers/food.svg'\nimport park from './icons/markers/park.svg'\nimport attraction1c from './icons/markers/attraction-onecolor.svg'\nimport coffee1c from './icons/markers/coffe-onecolor.svg'\nimport food1c from './icons/markers/food-onecolor.svg'\nimport park1c from './icons/markers/parks-onecolor.svg'\n\n\nclass App extends Component {\n\n  state = {\n    marker: [],\n    map: {},\n    markers: [],\n    infoWindow: [],\n    place: false,\n    image: [],\n    name:'',\n    openingHours: false,\n    url: '',\n    price: '',\n    rating: 0,\n    address: '',\n    hasError: false,\n    lat: 0,\n    long: 0,\n    wiki: '',\n    wikiImage: '',\n    wikiUrl: '',\n    wikiName: '',\n    wikiLat: 0,\n    wikiLong: 0,\n    selectedType: '',\n    googleError: false\n  }\n\n  /* ** Loads the google map, sets the markers based\n  on a separate database, with the help of the\n  react-async-script-loader. The map styles data\n  are in a separate file. Add event listeners to\n  the markers, and also extend the bounds of the map\n  based on the markers locations** */\n\n  componentWillReceiveProps({isScriptLoadSucceed}) {\n    if (isScriptLoadSucceed) {\n      let markers = [];\n      let map = new window.google.maps.Map(document.getElementById('map'), {\n       center: {lat: 41.9027835, lng: 12.496365500000024},\n       zoom: 8,\n       styles: mapStyle\n      });\n\n      let bounds = new window.google.maps.LatLngBounds();\n      let infoWindow = new window.google.maps.InfoWindow();\n\n      this.setState({\n        map: map,\n        infoWindow: infoWindow\n      });\n\n      locations.map((location) => {\n        let position = location.latlng;\n        let title = location.name;\n        let id = location.type;\n        let icon;\n\n        if (location.type === \"Attractions\") {\n         icon = {url: `${attraction}`}\n        } else if (location.type === \"Coffee\") {\n          icon = {url: `${coffee}`}\n        } else if (location.type === \"Restaurants\") {\n          icon = {url: `${food}`}\n        } else if (location.type === \"Parks\") {\n          icon = {url: `${park}`}\n        }\n\n        let marker = new window.google.maps.Marker({\n          map: map,\n          position: position,\n          title: title,\n          id: id,\n          icon: icon\n        });\n\n        markers.push(marker);\n\n        window.google.maps.event.addListener(marker, 'click', (function(map){\n            this.makeInfoWindow(marker, infoWindow, map);\n            this.setMarkerIcon(marker, markers);\n        }).bind(this));\n\n        bounds.extend(position);\n      });\n\n      map.fitBounds(bounds);\n      this.setState({ markers: markers });\n\n    } else {\n        alert(\"Script not loaded\");\n    }\n\n    window.gm_authFailure = function() {\n      this.setState({ googleError: true})\n    }.bind(this);\n  }\n\n /** With this function the selected marker's icon will be\n the original colored version, the rest will change to a\n one colored (brown) version, so that the selected one\n outstands. This function also sets the state of the place true,\n so that the user will see the SelectedPlace component.  ** */\n\n  setMarkerIcon(selectedIcon){\n    this.setState({\n      marker: selectedIcon,\n      place: true,\n      image: [],\n      name: '',\n      openingHours: false,\n      url: '',\n      price: '',\n      rating: 0,\n      address:'',\n      hasError: false,\n      wiki: '',\n      wikiImage: '',\n      wikiName: '',\n      wikiUrl: ''\n    });\n\n    if (selectedIcon.id === \"Attractions\") {\n      selectedIcon.setIcon(`${attraction}`);\n    } else if (selectedIcon.id === \"Coffee\") {\n      selectedIcon.setIcon(`${coffee}`);\n    } else if (selectedIcon.id === \"Restaurants\") {\n      selectedIcon.setIcon(`${food}`);\n    } else if (selectedIcon.id === \"Parks\") {\n      selectedIcon.setIcon(`${park}`);\n    }\n\n    this.state.markers.filter(marker => marker!==selectedIcon).map((loc) => {\n      if (loc.id === \"Attractions\") {\n       loc.setIcon(`${attraction1c}`);\n      } else if (loc.id === \"Coffee\") {\n       loc.setIcon(`${coffee1c}`);\n      } else if (loc.id === \"Restaurants\") {\n       loc.setIcon(`${food1c}`);\n      } else if (loc.id === \"Parks\") {\n       loc.setIcon(`${park1c}`);\n     }\n    });\n  }\n\n  /** This function create the infowindow if the user click\n  on a marker or one of the items on the menu list.\n  The marker's content will be the streetview image\n  based on the selected place position, and the name of it.\n  At the end of the function it will call another function\n  (based on the type of the selected place) which will\n  fetch additinal data from another databases. ** */\n\n  makeInfoWindow(marker) {\n    let infowindow = this.state.infoWindow;\n    let map = this.state.map;\n\n    /* Zoom into the place when the user click on it */\n    map.setZoom(15);\n    map.setCenter(marker.getPosition());\n\n    if (infowindow.marker !== marker) {\n      infowindow.setContent('');\n      infowindow.marker = marker;\n      infowindow.addListener('closeclick', function() {\n        infowindow.marker = null;\n      });\n\n      let streetViewService = new window.google.maps.StreetViewService();\n      let radius = 50;\n\n      function getStreetView(data, status) {\n        if (status === window.google.maps.StreetViewStatus.OK) {\n          let nearStreetViewLocation = data.location.latLng;\n          infowindow.setContent('<div id=\"pano\" style=\"width:200px; height:200px; position:static\"></div><h2>' + marker.title + '</h2>');\n          let panoramaOptions = {\n            position: nearStreetViewLocation,\n            disableDefaultUI: true,\n            pov: {\n              heading: 34,\n              pitch: 10\n            }\n          };\n          let panorama = new window.google.maps.StreetViewPanorama(\n            document.getElementById('pano'), panoramaOptions);\n        } else {\n          infowindow.setContent('<div>' + marker.title + '</div>' +\n            '<div>No Street View Found</div>');\n          }\n      }\n\n      streetViewService.getPanoramaByLocation(marker.position, radius, getStreetView);\n      infowindow.open(map, marker);\n    }\n\n    if ((marker.id === \"Attractions\") || (marker.id === \"Parks\")) {\n      this.wiki(marker);\n    } else if ((marker.id === \"Coffee\") || (marker.id === \"Restaurants\")) {\n      this.yelp(marker);\n    }\n  }\n\n  /** When the clicked place type is Coffee or Restaurant\n  the app fetches the additional data from Yelp's database.\n  Because Yelp's API doesn't support CORS, the app uses\n  cors-anywhere.herokuapp.com.\n  First step: search in Yelp database based on the selected\n  location's position and name.\n  If there is a match we fetch more data based on the\n  business id, and set the states of this location.\n  If there is no match at all: set the stete of\n  hasError to true ** */\n\n  yelp(marker) {\n    const search = 'https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?';\n    const lat = marker.getPosition().lat();\n    const lang = marker.getPosition().lng();\n    const query = marker.title;\n\n    const params = {\n      latitude: lat,\n      longitude: lang,\n      term: query,\n      radius: 50,\n      limit: 1\n    };\n\n    const headers = {\n      'Authorization': `Bearer ${config.yelp_api}`,\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Origin': 'http://localhost:3000',\n      'Access-Control-Allow-Headers': '*',\n      'Access-Control-Allow-Origin': 'http://localhost:3000'\n    };\n\n    fetch(search + new URLSearchParams(params), {\n      headers: headers\n    }).then((resp) => resp.json()\n    ).then((response) => {\n        let id = response.businesses[0].id;\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/${id}`, {\n        headers: headers\n        })\n    }).then((resp) => resp.json()\n    ).then((response) => {\n      if (!response.hasOwnProperty(\"hours\")) {\n        this.setState({\n          openingHours: \"No data available\",\n      })} else {\n        this.setState({\n        openingHours: response.hours[0].is_open_now,\n      })};\n        this.setState({\n          image: response.photos,\n          //openingHours: response.hours[0].is_open_now,\n          url: response.url,\n          price: response.price,\n          rating: response.rating,\n          address: response.location.address1,\n          name: response.name,\n          lat: response.coordinates.latitude,\n          long: response.coordinates.longitude\n        })\n    }).catch((e) => {\n      console.log(e);\n          this.setState({ hasError: true });\n    })\n  }\n\n  /** When the clicked place's type is Attraction or Park\n  the app fetches the additional data from Wikipedia's database.\n  First step: search in Wikipedia's database based on the selected\n  location's name.\n  If there is a match we call another function with the\n  Wikipedia's title.\n  If there is no match at all: set the state of\n  hasError to true. ** */\n\n  wiki(marker) {\n    $.ajax({\n      url: `https://en.wikipedia.org/w/api.php?action=opensearch&format=json&search=${marker.title}`,\n      type: 'GET',\n      headers: {'X-Requested-With': 'XMLHttpRequest'},\n      crossDomain: true,\n      dataType: 'jsonp'\n    }).done(function(data) {\n      let title = data[1][0];\n      title = title.replace(/\\s+/g, '_');\n      this.wikiText(title, marker);\n    }.bind(this)\n    ).fail(function() {\n        this.setState({ hasError: true })\n    }.bind(this));\n  }\n\n  /** Make another ajax request based on the previously\n  fetched title, and set the states with the received data.\n  If an error occure the fail function set the hasError\n  state to true. ** */\n\n  wikiText(title, marker) {\n    $.ajax({\n      url: `https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts|pageimages|info&exintro=&explaintext=&piprop=original&inprop=url&titles=${title}`,\n      type: 'GET',\n      headers: {'X-Requested-With': 'XMLHttpRequest'},\n      crossDomain: true,\n      dataType: 'jsonp'\n    }).done(function(data) {\n      let page = data.query.pages;\n      let pageId = Object.keys(data.query.pages)[0];\n      let text = page[pageId].extract;\n      let url = page[pageId].fullurl;\n      let image = page[pageId].original.source;\n      let title = page[pageId].title;\n      this.setState({\n        wiki: text,\n        wikiImage: image,\n        wikiUrl: url,\n        wikiName: title,\n        wikiLat: marker.getPosition().lat(),\n        wikiLong: marker.getPosition().lng()\n      })\n    }.bind(this)\n    ).fail(function() {\n        this.setState({ hasError: true });\n    }.bind(this));\n  }\n\n  /** When the user is at the selected place's page,\n  they have the option to go back to the main menu.\n  Whey they click on the back icon or text the app\n  set the place state to false. ** */\n\n  updatePlace() {\n    this.setState({ place: false});\n  }\n\n  /** When the user selects a type at a\n  Dropdown selection menu, this state will filter\n  the type and shows the places that match. On the\n  map it's also highlight the selected types ** */\n\n  updateType(type) {\n    this.setState({ selectedType: type });\n\n    this.state.markers.map((loc) => {\n      if (type === \"All\") {\n        if (loc.id === \"Attractions\") {\n          loc.setIcon(`${attraction}`);\n          } else if (loc.id === \"Coffee\") {\n             loc.setIcon(`${coffee}`);\n          } else if (loc.id === \"Restaurants\") {\n             loc.setIcon(`${food}`);\n          } else if (loc.id === \"Parks\") {\n             loc.setIcon(`${park}`);\n          }\n      } else if ((loc.id === \"Attractions\") && (loc.id === type)) {\n         loc.setIcon(`${attraction}`);\n      } else if ((loc.id === \"Coffee\") && (loc.id === type)) {\n         loc.setIcon(`${coffee}`);\n      } else if ((loc.id === \"Restaurants\") && (loc.id === type)) {\n         loc.setIcon(`${food}`);\n      } else if ((loc.id === \"Parks\") && (loc.id === type)) {\n         loc.setIcon(`${park}`);\n      } else if ((loc.id === \"Attractions\") && (loc.id !== type)) {\n         loc.setIcon(`${attraction1c}`);\n      } else if ((loc.id === \"Coffee\") && (loc.id !== type)) {\n         loc.setIcon(`${coffee1c}`);\n      } else if ((loc.id === \"Restaurants\") && (loc.id !== type)) {\n         loc.setIcon(`${food1c}`);\n      } else if ((loc.id === \"Parks\") && (loc.id !== type)) {\n         loc.setIcon(`${park1c}`);\n      }\n    });\n  }\n\n  /** Return components based on the state\n  of the place, marker.id  and hasError.\n  The state of the place initially false,\n  so the user will see the AllLocations component first.\n  When the user clicks on a marker or a place's name\n  on the list, the state of a place will change\n  so that they will see a SelectedPlace component\n  or SelectedPlaceWiki component based on the marker's id.\n  If the hasError state is true then an error\n  message will be returned. ** */\n\n  render() {\n    return (\n      <main className=\"App\">\n      <section className=\"information\">\n        {this.state.place===false && (\n          <AllLocations\n            markers = {this.state.markers}\n            locations = {locations}\n            selectedType = {this.state.selectedType}\n            onMap = {(marker) => {\n              this.setMarkerIcon(marker)\n              this.makeInfoWindow(marker)\n            }}\n            onUpdateType = {(type) => {\n              this.updateType(type)\n            }}\n          />\n        )}\n\n        {(this.state.place===true && ((this.state.marker.id === \"Coffee\") || (this.state.marker.id === \"Restaurants\"))) && (\n          <SelectedPlace\n            name = {this.state.name}\n            image = {this.state.image}\n            openingHours = {this.state.openingHours}\n            url = {this.state.url}\n            price = {this.state.price}\n            rating = {this.state.rating}\n            address = {this.state.address}\n            lat = {this.state.lat}\n            long = {this.state.long}\n            onUpdatePlace = {() => {\n              this.updatePlace()\n            }}\n          />\n        )}\n\n        {(this.state.place===true && ((this.state.marker.id === \"Attractions\") || (this.state.marker.id === \"Parks\"))) && (\n          <SelectedPlaceWiki\n            wikiName = {this.state.wikiName}\n            wikiUrl = {this.state.wikiUrl}\n            wiki = {this.state.wiki}\n            wikiImage = {this.state.wikiImage}\n            wikiLat = {this.state.wikiLat}\n            wikiLong = {this.state.wikiLong}\n            onUpdatePlace = {() => {\n              this.updatePlace()\n            }}\n          />\n        )}\n\n\n        {this.state.hasError===true && (\n          <h3>Sorry, the database do not have results :( </h3>\n        )}\n\n\n\n      </section>\n\n      <section className=\"map-container\">\n        {this.state.googleError===true && (\n          <div className=\"googleError\">\n          <h3>*** Looks like you have an authentication error ***</h3>\n          <p> Please put your Google Map API key in the config_helper.json file, or check the console for further information. </p>\n          </div>\n        )}\n        <div id=\"map\"></div>\n      </section>\n\n      </main>\n    );\n  }\n}\n\nexport default scriptLoader(\n    [`https://maps.googleapis.com/maps/api/js?key=${config.googleApi}&libraries=geometry`]\n)(App)\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}